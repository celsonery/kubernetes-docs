import{_ as n,c as s,o as a,e}from"./app-CTpZyuN8.js";const i="/k8s-documentation/assets/saida_all_namespaces01-CCeMJhOH.png",t="/k8s-documentation/assets/saida_wave_01-DPsnLQYX.png",l={},p=e(`<h1 id="iniciando-o-no-mestre" tabindex="-1"><a class="header-anchor" href="#iniciando-o-no-mestre"><span>Iniciando o nó mestre</span></a></h1><ul><li>No Master execute <strong>kubeadm init</strong> para inicializar o cluster pela primeira vez.</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"># kubeadm init</span>
<span class="line"></span>
<span class="line">ou</span>
<span class="line"></span>
<span class="line"># kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=10.0.10.100 --kubernetes-version=&quot;1.21.1&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>install Kubernetes Cluster with Kubeadm kubelet doesn’t appreciate the command-line options anymore (these are deprecated). Instead, I suggest to create a configuration file, say ‘kubelet.yaml’ with following content.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">$ vi kubelet.yaml</span>
<span class="line">apiVersion: kubeadm.k8s.io/v1beta3</span>
<span class="line">kind: InitConfiguration</span>
<span class="line">---</span>
<span class="line">apiVersion: kubeadm.k8s.io/v1beta3</span>
<span class="line">kind: ClusterConfiguration</span>
<span class="line">kubernetesVersion: &quot;1.23.1&quot; # Replace with your desired version</span>
<span class="line">controlPlaneEndpoint: &quot;k8s-master&quot;</span>
<span class="line">---</span>
<span class="line">apiVersion: kubelet.config.k8s.io/v1beta1</span>
<span class="line">kind: KubeletConfiguration</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">$ sudo kubeadm init --config kubelet.yaml</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>A Saida será algo como:</p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token punctuation">[</span>init<span class="token punctuation">]</span> Using Kubernetes version: v1.21.1</span>
<span class="line"><span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Running pre-flight checks</span>
<span class="line"><span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Pulling images required <span class="token keyword">for</span> setting up a Kubernetes cluster</span>
<span class="line"><span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> This might take a minute or two, depending on the speed of your internet connection</span>
<span class="line"><span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> You can also perform this action <span class="token keyword">in</span> beforehand using <span class="token string">&#39;kubeadm config images pull&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet environment <span class="token function">file</span> with flags to <span class="token function">file</span> <span class="token string">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span></span>
<span class="line"><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet configuration to <span class="token function">file</span> <span class="token string">&quot;/var/lib/kubelet/config.yaml&quot;</span></span>
<span class="line"><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Activating the kubelet <span class="token function">service</span></span>
<span class="line"><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Using certificateDir folder <span class="token string">&quot;/etc/kubernetes/pki&quot;</span></span>
<span class="line"><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">&quot;ca&quot;</span> certificate and key</span>
<span class="line"><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">&quot;apiserver-kubelet-client&quot;</span> certificate and key</span>
<span class="line"></span>
<span class="line"><span class="token punctuation">..</span>.</span>
<span class="line"></span>
<span class="line"><span class="token punctuation">[</span>bootstraptoken<span class="token punctuation">]</span> configured RBAC rules to allow certificate rotation <span class="token keyword">for</span> all <span class="token function">node</span> client certificates <span class="token keyword">in</span> the cluster</span>
<span class="line"><span class="token punctuation">[</span>bootstraptoken<span class="token punctuation">]</span> creating the <span class="token string">&quot;cluster-info&quot;</span> ConfigMap <span class="token keyword">in</span> the <span class="token string">&quot;kube-public&quot;</span> namespace</span>
<span class="line"><span class="token punctuation">[</span>addons<span class="token punctuation">]</span> Applied essential addon: CoreDNS</span>
<span class="line"><span class="token punctuation">[</span>addons<span class="token punctuation">]</span> Applied essential addon: kube-proxy</span>
<span class="line"></span>
<span class="line">Your Kubernetes master has initialized successfully<span class="token operator">!</span></span>
<span class="line"></span>
<span class="line">To start using your cluster, you need to run the following as a regular user:</span>
<span class="line"></span>
<span class="line">  <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token environment constant">$HOME</span>/.kube</span>
<span class="line">  <span class="token function">sudo</span> <span class="token function">cp</span> <span class="token parameter variable">-i</span> /etc/kubernetes/admin.conf <span class="token environment constant">$HOME</span>/.kube/config</span>
<span class="line">  <span class="token function">sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-u</span><span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-g</span><span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/config</span>
<span class="line"></span>
<span class="line">You should now deploy a pod network to the cluster.</span>
<span class="line">Run <span class="token string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span>
<span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span>
<span class="line"></span>
<span class="line">Then you can <span class="token function">join</span> any number of worker nodes by running the following on each as root:</span>
<span class="line"></span>
<span class="line">kubeadm <span class="token function">join</span> <span class="token number">10.0</span>.2.100:6443 <span class="token parameter variable">--token</span> d1dyaj.31zxywbg93s1ywjy --discovery-token-ca-cert-hash sha256:71a91721595fde66b6382908d801266602a14de8e16bdb7a3cede21509427009</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Anote o token e a chave para usar nos nós escravos.</p></blockquote><p>Para executar o kubernetes copie o arquivo <strong>admin.conf</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">mkdir -p $HOME/.kube</span>
<span class="line">cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span>
<span class="line">chown $(id -u):$(id -g) $HOME/.kube/config</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Rode o comando abaixo para verificar o status do cluster</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">kubectl get pods --all-namespaces</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>A Saida deve estar assim: <img src="`+i+`" alt="All namespaces em pending"></p></blockquote><p>Crie uma rede virtual ( namely, calico, canal, flannel, weave )</p><p>Exemplo Calico:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl apply <span class="token parameter variable">-f</span> https://raw.githubusercontent.com/projectcalico/calico/v3.28.2/manifests/calico.yaml</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Exemplo rede flannel:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl apply <span class="token parameter variable">-f</span> https://raw.githubusercontent.com/flannel-io/flannel/v0.20.2/Documentation/kube-flannel.yml</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Exemplo rede weave:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">export kubever=$(kubectl version | base64 | tr -d &#39;\\n&#39;)</span>
<span class="line">kubectl apply -f &quot;https://cloud.weave.works/k8s/net?k8s-version=$kubever&quot;</span>
<span class="line"></span>
<span class="line">kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>A saída deve ser igual a essa: <img src="`+t+'" alt="Resposta rede wave"></p></blockquote><blockquote><p>Após esse procedimento os <strong>coredns</strong> devem estar &quot;running&quot;</p></blockquote>',23),c=[p];function o(r,u){return a(),s("div",null,c)}const v=n(l,[["render",o],["__file","03-initialize-master.html.vue"]]),m=JSON.parse('{"path":"/kubernetes/03-initialize-master.html","title":"Iniciando o nó mestre","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1732281297000,"contributors":[{"name":"Celso Nery","email":"celso.nery@gmail.com","commits":1}]},"filePathRelative":"kubernetes/03-initialize-master.md"}');export{v as comp,m as data};
